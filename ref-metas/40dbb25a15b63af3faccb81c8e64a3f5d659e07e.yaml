authors:
- A. Aho
- J. Ullman
badges: []
corpusId: 60775129
fieldsOfStudy:
- Computer Science
numCitedBy: 1856
numCiting: 0
paperAbstract: "From volume 1 Preface (See Front Matter for full Preface) \n \nThis\
  \ book is intended for a one or two semester course in compiling theory at the senior\
  \ or graduate level. It is a theoretically oriented treatment of a practical subject.\
  \ Our motivation for making it so is threefold. \n \n(1) In an area as rapidly changing\
  \ as Computer Science, sound pedagogy demands that courses emphasize ideas, rather\
  \ than implementation details. It is our hope that the algorithms and concepts presented\
  \ in this book will survive the next generation of computers and programming languages,\
  \ and that at least some of them will be applicable to fields other than compiler\
  \ writing. \n \n(2) Compiler writing has progressed to the point where many portions\
  \ of a compiler can be isolated and subjected to design optimization. It is important\
  \ that appropriate mathematical tools be available to the person attempting this\
  \ optimization. \n \n(3) Some of the most useful and most efficient compiler algorithms,\
  \ e.g. LR(k) parsing, require a good deal of mathematical background for full understanding.\
  \ We expect, therefore, that a good theoretical background will become essential\
  \ for the compiler designer. \n \nWhile we have not omitted difficult theorems that\
  \ are relevant to compiling, we have tried to make the book as readable as possible.\
  \ Numerous examples are given, each based on a small grammar, rather than on the\
  \ large grammars encountered in practice. It is hoped that these examples are sufficient\
  \ to illustrate the basic ideas, even in cases where the theoretical developments\
  \ are difficult to follow in isolation. \n \nFrom volume 2 Preface (See Front Matter\
  \ for full Preface) \n \nCompiler design is one of the first major areas of systems\
  \ programming for which a strong theoretical foundation is becoming available. Volume\
  \ I of The Theory of Parsing, Translation, and Compiling developed the relevant\
  \ parts of mathematics and language theory for this foundation and developed the\
  \ principal methods of fast syntactic analysis. Volume II is a continuation of Volume\
  \ I, but except for Chapters 7 and 8 it is oriented towards the nonsyntactic aspects\
  \ of compiler design. \n \nThe treatment of the material in Volume II is much the\
  \ same as in Volume I, although proofs have become a little more sketchy. We have\
  \ tried to make the discussion as readable as possible by providing numerous examples,\
  \ each illustrating one or two concepts. \n \nSince the text emphasizes concepts\
  \ rather than language or machine details, a programming laboratory should accompany\
  \ a course based on this book, so that a student can develop some facility in applying\
  \ the concepts discussed to practical problems. The programming exercises appearing\
  \ at the ends of sections can be used as recommended projects in such a laboratory.\
  \ Part of the laboratory course should discuss the code to be generated for such\
  \ programming language constructs as recursion, parameter passing, subroutine linkages,\
  \ array references, loops, and so forth."
ref_count: 0
references: []
slug: The-Theory-of-Parsing,-Translation,-and-Compiling-Aho-Ullman
title: The Theory of Parsing, Translation, and Compiling
url: https://www.semanticscholar.org/paper/The-Theory-of-Parsing,-Translation,-and-Compiling-Aho-Ullman/40dbb25a15b63af3faccb81c8e64a3f5d659e07e?sort=total-citations
venue: ''
year: 1972
