{
    "links": [
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9079926"
                        ],
                        "name": "W. Woods",
                        "slug": "W.-Woods",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Woods",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "W. Woods"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 33,
                                "start": 20
                            }
                        ],
                        "text": "network (taken from Woods (1970)) translates into a DCG which is simply a CFG~ The network is shown in Fig."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 113,
                                "start": 100
                            }
                        ],
                        "text": "In Appendix 2, we give some timing figures for a DCG translation of an early specimen ATN, given by Woods (1970), and also data for a DCG of some complexity covering a sizable subset of English."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 26,
                                "start": 13
                            }
                        ],
                        "text": "For example, Woods (1970) has discussed the question of whether ATNs can be used for generation as well as for recognition, i."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 990,
                                "start": 82
                            }
                        ],
                        "text": "In his discussion of \"Efficiency of Representation\" and \"Capturing Regularities\", Woods is really concerned with the conciseness of a formalism. This criterion is aptly summed up in his \"economy principle\"--that the best grammar is that which can characterise a language in the least number of symbols. If, according to this principle, one compares the textual forms of equivalent ATNs and DCGs (counting each identifier as one symbol, and discounting punttuation symbols such as brackets and commas), one generally finds that DCGs are significantly smaller. Typically, the DCG is only around halt\" the size of the ATN. DCGs are more concise than ATNs for the same reasons that logic programs are in general more concise than programs in conventional languages. The main factor is the use of pattern matching instead of explicit operations for setting and testing registers and building structures. As has been seen, DCGs are a natural generalisation of context-free grammars. Woods (1970) states that \"a major advantage of the transition network model over the usual context-free grammar model is the ability to merge the common parts of many context-free rules, thus allowing greater efficiency of representation\"."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 36,
                                "start": 24
                            }
                        ],
                        "text": "ATNs were introduced by Woods (1970) as a powerful and practical formalism for natural language analysis."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 18366823,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "09550accec47459a61fe1710a0a32c2ec22449bd",
            "isKey": true,
            "numCitedBy": 1450,
            "numCiting": 36,
            "paperAbstract": {
                "fragments": [],
                "text": "The use of augmented transition network grammars for the analysis of natural language sentences is described. Structure-building actions associated with the arcs of the grammar network allow for the reordering, restructuring, and copying of constituents necessary to produce deep-structure representations of the type normally obtained from a transformational analysis, and conditions on the arcs allow for a powerful selectivity which can rule out meaningless analyses and take advantage of semantic information to guide the parsing. The advantages of this model for natural language analysis are discussed in detail and illustrated by examples. An implementation of an experimental parsing system for transition network grammars is briefly described."
            },
            "slug": "Transition-network-grammars-for-natural-language-Woods",
            "title": {
                "fragments": [],
                "text": "Transition network grammars for natural language analysis"
            },
            "tldr": {
                "abstractSimilarityScore": 75,
                "text": "The use of augmented transition network grammars for the analysis of natural language sentences is described, and structure-building actions associated with the arcs of the grammar network allow for a powerful selectivity which can rule out meaningless analyses and take advantage of semantic information to guide the parsing."
            },
            "venue": {
                "fragments": [],
                "text": "CACM"
            },
            "year": 1970
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1879397"
                        ],
                        "name": "D. Warren",
                        "slug": "D.-Warren",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Warren",
                            "middleNames": [
                                "H.",
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Warren"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1747400"
                        ],
                        "name": "L. Pereira",
                        "slug": "L.-Pereira",
                        "structuredName": {
                            "firstName": "Lu\u00eds",
                            "lastName": "Pereira",
                            "middleNames": [
                                "Moniz"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Pereira"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145366908"
                        ],
                        "name": "Fernando C Pereira",
                        "slug": "Fernando-C-Pereira",
                        "structuredName": {
                            "firstName": "Fernando",
                            "lastName": "Pereira",
                            "middleNames": [
                                "C"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fernando C Pereira"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "A feature of the DECsystem-10 Prolog implementation which can make a very significant contribution to the speed of operation of a DCG is the automatic indexing provided for the clauses of each predicate ( Warren et al., 1977;  Warren, 1977a)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 43,
                                "start": 23
                            }
                        ],
                        "text": "These are discussed in Warren et al. (1977) ."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "These are discussed in  Warren et al. (1977) ."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "Several implementations of the language have been completed, and these implementations have shown that Prolog can be as efficient as conventional high-level programming languages, cf.  Warren et al. (1977) ."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "A discussion in  Warren et al. (1977)  attributes much of Prolog's surprisingly competitive speed, compared with Lisp, to the use of \"structure sharing\" (Boyer and Moore, 1972; Warren, 1977a) to build new data structures."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 16131579,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "57f796c1bb843b65ba45c42aa00c1068c529eae0",
            "isKey": false,
            "numCitedBy": 147,
            "numCiting": 15,
            "paperAbstract": {
                "fragments": [],
                "text": "Prolog is a simple but powerful programming language founded on symbolic logic. The basic computational mechanism is a pattern matching process (\u201cunification\u201d) operating on general record structures (\u201cterms\u201d of logic). We briefly review the language and compare it especially with pure Lisp. The remainder of the paper discusses techniques for implementing Prolog efficiently; in particular we describe how to compile the patterns involved in the matching process. These techniques are as incorporated in our DECsystem-10 Prolog compiler (written in Prolog). The code it generates is comparable in speed with that produced by existing DEC10 Lisp compilers. We argue that pattern matching is a better method for expressing operations on structured data than conventional selectors and constructors - both for the user and for the implementor."
            },
            "slug": "Prolog-the-language-and-its-implementation-compared-Warren-Pereira",
            "title": {
                "fragments": [],
                "text": "Prolog - the language and its implementation compared with Lisp"
            },
            "tldr": {
                "abstractSimilarityScore": 36,
                "text": "It is argued that pattern matching is a better method for expressing operations on structured data than conventional selectors and constructors - both for the user and for the implementor."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1977
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144121212"
                        ],
                        "name": "Timothy W. Finin",
                        "slug": "Timothy-W.-Finin",
                        "structuredName": {
                            "firstName": "Timothy",
                            "lastName": "Finin",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Timothy W. Finin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3218045"
                        ],
                        "name": "G. Hadden",
                        "slug": "G.-Hadden",
                        "structuredName": {
                            "firstName": "George",
                            "lastName": "Hadden",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Hadden"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 252,
                                "start": 230
                            }
                        ],
                        "text": "They have been used to implement a number of working natural language systems (Woods et al., 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 41927144,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "21df8e266d71cb3a2e27fdb1632413c044b6c2ea",
            "isKey": false,
            "numCitedBy": 4,
            "numCiting": 5,
            "paperAbstract": {
                "fragments": [],
                "text": "Augmented Transition Networks (ATNs) have become a popular and effective tool for constructing natural language understanding systems. Our own system, PLANES [Waltz 76], is based on a large \u201csemantic grammar\u201d which is implemented as an ATN network. In developing our system, we were frustrated by numerous problems and shortcomings in the basic ATN formalism. Consequently, we have augmented and extended the model to overcome some of these problems. We have also developed an optimizing compiler for ATN networks which translates them into LISP functions and an interactive program which allows one to easily extend and modify an ATN grammar."
            },
            "slug": "Augmenting-ATNS-Finin-Hadden",
            "title": {
                "fragments": [],
                "text": "Augmenting ATNS"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "An optimizing compiler for ATN networks which translates them into LISP functions and an interactive program which allows one to easily extend and modify an ATN grammar."
            },
            "venue": {
                "fragments": [],
                "text": "IJCAI"
            },
            "year": 1977
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144451588"
                        ],
                        "name": "J. Backus",
                        "slug": "J.-Backus",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Backus",
                            "middleNames": [
                                "Warner"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Backus"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1775998"
                        ],
                        "name": "F. L. Bauer",
                        "slug": "F.-L.-Bauer",
                        "structuredName": {
                            "firstName": "Friedrich",
                            "lastName": "Bauer",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. L. Bauer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2134869912"
                        ],
                        "name": "Julien Green",
                        "slug": "Julien-Green",
                        "structuredName": {
                            "firstName": "Julien",
                            "lastName": "Green",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Julien Green"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49257652"
                        ],
                        "name": "C. Katz",
                        "slug": "C.-Katz",
                        "structuredName": {
                            "firstName": "C.",
                            "lastName": "Katz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Katz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065378716"
                        ],
                        "name": "J. McCarthy",
                        "slug": "J.-McCarthy",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "McCarthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. McCarthy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1790022"
                        ],
                        "name": "A. Perlis",
                        "slug": "A.-Perlis",
                        "structuredName": {
                            "firstName": "Alan",
                            "lastName": "Perlis",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Perlis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145192245"
                        ],
                        "name": "H. Rutishauser",
                        "slug": "H.-Rutishauser",
                        "structuredName": {
                            "firstName": "Heinz",
                            "lastName": "Rutishauser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Rutishauser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3261977"
                        ],
                        "name": "K. Samelson",
                        "slug": "K.-Samelson",
                        "structuredName": {
                            "firstName": "Klaus",
                            "lastName": "Samelson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Samelson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2784830"
                        ],
                        "name": "B. Vauquois",
                        "slug": "B.-Vauquois",
                        "structuredName": {
                            "firstName": "Bernard",
                            "lastName": "Vauquois",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "B. Vauquois"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48681841"
                        ],
                        "name": "J. Wegstein",
                        "slug": "J.-Wegstein",
                        "structuredName": {
                            "firstName": "Joseph",
                            "lastName": "Wegstein",
                            "middleNames": [
                                "Henry"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Wegstein"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8674722"
                        ],
                        "name": "A. V. Wijngaarden",
                        "slug": "A.-V.-Wijngaarden",
                        "structuredName": {
                            "firstName": "Adriaan",
                            "lastName": "Wijngaarden",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. V. Wijngaarden"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "11125381"
                        ],
                        "name": "M. Woodger",
                        "slug": "M.-Woodger",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Woodger",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Woodger"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1733249"
                        ],
                        "name": "P. Naur",
                        "slug": "P.-Naur",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Naur",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Naur"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 7853511,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6faae1e54f75a56c63e326bb3c25decb6233a02a",
            "isKey": false,
            "numCitedBy": 791,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": "a survey of the basic coustituents arid fcuturcs of the language is given, and the formal notation, by which the syntactic structure is defined, is esplaincd. The sccnnd chapter lists all the basic symbols, and the syntactic units known as identifiers, numbers and strings are defined. Further, some im.portant notions such as cliiantity and value are defined. The third chapter explains the rules for forming expressions and the meaning of these expressions. Three different types of expressions exist: arithmetic, Boolean (logical) and designational. The fourth chapter describes the operational units of the language, known as statements. The basic statements are : assignment statements (evaluation of a formula), go to statements (explicit break of the sequence of execution of statements), dummy statements, and procedure statements (call for execution of a closed process, defined by a procedure declaration). The formation of more complex structures, having statement character, is explained. These include : conditional statements, for statements, compound statements, and blocks. In the fifth chapter, the units known as declarations, serving for defining permanent properties of the units entering into a process described in the language, are defined. The report ends with two detailed examples of the use of the language and an alphabetic index of definitions."
            },
            "slug": "Revised-report-on-the-algorithm-language-ALGOL-60-Backus-Bauer",
            "title": {
                "fragments": [],
                "text": "Revised report on the algorithm language ALGOL 60"
            },
            "tldr": {
                "abstractSimilarityScore": 98,
                "text": "A survey of the basic coustituents arid fcuturcs of the language is given, and the formal notation, by which the syntactic structure is defined, is explained."
            },
            "venue": {
                "fragments": [],
                "text": "CACM"
            },
            "year": 1963
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145282631"
                        ],
                        "name": "J. A. Robinson",
                        "slug": "J.-A.-Robinson",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Robinson",
                            "middleNames": [
                                "Alan"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. A. Robinson"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 39,
                                "start": 25
                            }
                        ],
                        "text": "The unification process (Robinson, 1965) finds the most general common instance of the two terms, which is unique if it exists."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 14389185,
            "fieldsOfStudy": [
                "Mathematics"
            ],
            "id": "d2109eba4f160755f0b9a7497b6b691c2fa2d5d8",
            "isKey": false,
            "numCitedBy": 4367,
            "numCiting": 12,
            "paperAbstract": {
                "fragments": [],
                "text": ":tb.~tract. Theorem-proving on the computer, using procedures based on the fund~mental theorem of Herbrand concerning the first-order predicate etdeulus, is examined with ~ view towards improving the efticieney and widening the range of practical applicability of these procedures. A elose analysis of the process of substitution (of terms for variables), and the process of t ruth-funct ional analysis of the results of such substitutions, reveals that both processes can be combined into a single new process (called resolution), i terating which is vastty more ef[ieient than the older cyclic procedures consisting of substitution stages alternating with truth-functional analysis stages. The theory of the resolution process is presented in the form of a system of first<~rder logic with .just one inference principle (the resolution principle). The completeness of the system is proved; the simplest proof-procedure based oil the system is then the direct implementation of the proof of completeness. Howew~r, this procedure is quite inefficient, ~nd the paper concludes with a discussion of several principles (called search principles) which are applicable to the design of efficient proof-procedures employing resolution as the basle logical process."
            },
            "slug": "A-Machine-Oriented-Logic-Based-on-the-Resolution-Robinson",
            "title": {
                "fragments": [],
                "text": "A Machine-Oriented Logic Based on the Resolution Principle"
            },
            "tldr": {
                "abstractSimilarityScore": 38,
                "text": "The paper concludes with a discussion of several principles which are applicable to the design of efficient proof-procedures employing resolution as the basle logical process."
            },
            "venue": {
                "fragments": [],
                "text": "JACM"
            },
            "year": 1965
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "102473736"
                        ],
                        "name": "S. BoyerRoger",
                        "slug": "S.-BoyerRoger",
                        "structuredName": {
                            "firstName": "S",
                            "lastName": "BoyerRoger",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. BoyerRoger"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "12725412"
                        ],
                        "name": "J. S. Moore",
                        "slug": "J.-S.-Moore",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Moore",
                            "middleNames": [
                                "Strother"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. S. Moore"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 159,
                                "start": 121
                            }
                        ],
                        "text": "(1977) attributes much of Prolog's surprisingly competitive speed, compared with Lisp, to the use of \"structure sharing\" (Boyer and Moore, 1972; Warren, 1977a) to build new data structures."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 7838686,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "25d6b9e8938b30bbd64a043851f911eb6a9727cf",
            "isKey": false,
            "numCitedBy": 91,
            "numCiting": 2,
            "paperAbstract": {
                "fragments": [],
                "text": "We describe how clauses in resolution programs can be represented and used Without applying substitutions or cons-ing lists of literals. The amount of space required by our representation of a clause is independent of the number of literals in the clause and the depth of function nesting. We introduce the concept of the value of an expression in a binding environment which we use to standardize clauses apart and share the structure of parents in representing the resolvent. We present unification and resolution algorithms for our representation. Some data comparing our representation to more conventional ones is given."
            },
            "slug": "Ttle-sharing-of-structure-in-theorem-proving-BoyerRoger-Moore",
            "title": {
                "fragments": [],
                "text": "Ttle sharing of structure in theorem proving programs"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "The concept of the value of an expression in a binding environment which is used to standardize clauses apart and share the structure of parents in representing the resolvent in resolution programs is introduced."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1972
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145366908"
                        ],
                        "name": "Fernando C Pereira",
                        "slug": "Fernando-C-Pereira",
                        "structuredName": {
                            "firstName": "Fernando",
                            "lastName": "Pereira",
                            "middleNames": [
                                "C"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fernando C Pereira"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 12928004,
            "fieldsOfStudy": [
                "Linguistics"
            ],
            "id": "a70441f4a1922af89a4da83411ccc4ff30b1b8f1",
            "isKey": false,
            "numCitedBy": 129,
            "numCiting": 20,
            "paperAbstract": {
                "fragments": [],
                "text": "Extraposition grammars are an extension of definite clause grammars, and are similarly defined in terms of logic clauses. The extended formalism makes it easy to describe left extraposition of constituents, an important feature of natural language syntax."
            },
            "slug": "Extraposition-Grammars-Pereira",
            "title": {
                "fragments": [],
                "text": "Extraposition Grammars"
            },
            "tldr": {
                "abstractSimilarityScore": 76,
                "text": "An extension of definite clause grammars, and are similarly defined in terms of logic clauses, which makes it easy to describe left extraposition of constituents, an important feature of natural language syntax."
            },
            "venue": {
                "fragments": [],
                "text": "Am. J. Comput. Linguistics"
            },
            "year": 1981
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1879397"
                        ],
                        "name": "D. Warren",
                        "slug": "D.-Warren",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Warren",
                            "middleNames": [
                                "H.",
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Warren"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 35428984,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3f4c36e8ddec5d265dd6b6b811833538f958eca8",
            "isKey": false,
            "numCitedBy": 130,
            "numCiting": 1,
            "paperAbstract": {
                "fragments": [],
                "text": "The concept of \u2018logic programming\u2019, and its practical application in the programming language Prolog, are explained from first principles. The ideas are illustrated by describing in detail one sizable Prolog program which implements a simple compiler. The advantages and practicability of using Prolog for \u2018real\u2019 compiler implementation are discussed."
            },
            "slug": "Logic-programming-and-compiler-writing-Warren",
            "title": {
                "fragments": [],
                "text": "Logic programming and compiler writing"
            },
            "tldr": {
                "abstractSimilarityScore": 79,
                "text": "The concept of \u2018logic programming\u2019, and its practical application in the programming language Prolog, are explained from first principles, and one sizable Prolog program which implements a simple compiler is described."
            },
            "venue": {
                "fragments": [],
                "text": "Softw. Pract. Exp."
            },
            "year": 1980
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709749"
                        ],
                        "name": "R. Kowalski",
                        "slug": "R.-Kowalski",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Kowalski",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Kowalski"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "The basic idea has been discussed by  Kowalski (1974b)  and Colmerauer (1975) has given a fully formal treatment."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "This was that a collection of definite clauses can be considered to be a program (see  Kowalski (1974a, 1974b) ; van Emden (1975).) It turns out that automatic deduction can exhibit all the characteristics we associate with effective computation, provided the deduction is pursued in a suitably goal-directed way."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "The proof procedure used determines the parsing strat!:gy, cf.  Kowalski (1974b) ."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 5285557,
            "fieldsOfStudy": [
                "Psychology"
            ],
            "id": "3430d7929dc9c0c9278dca858e785ee3d89ce2b0",
            "isKey": true,
            "numCitedBy": 1631,
            "numCiting": 18,
            "paperAbstract": {
                "fragments": [],
                "text": "This book investigates the application of logic to problem-solving and computer programming. It assumes no previous knowledge of these fields, and may be Karl duncker in addition to make difficult fill one of productive. The unifying epistemological virtues of program variables tuples in different terminologies he wants. Functional fixedness which appropriate solutions are most common barrier. Social psychologists over a goal is represented can take. There is often largely unintuitive and, all be overcome standardized procedures like copies? Functional fixedness it can be made possible for certain fields looks. In the solution paths or pencil. After toiling over the ultimate mentions that people cling rigidly to strain on. Luckily the book for knowledge of atomic sentences or fundamental skills. Functional fixedness is a problem solving techniques such."
            },
            "slug": "Logic-for-problem-solving-Kowalski",
            "title": {
                "fragments": [],
                "text": "Logic for problem solving"
            },
            "tldr": {
                "abstractSimilarityScore": 98,
                "text": "This book investigates the application of logic to problem-solving and computer programming and assumes no previous knowledge of these fields, and may be Karl duncker in addition to make difficult fill one of productive."
            },
            "venue": {
                "fragments": [],
                "text": "SOEN"
            },
            "year": 1982
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48959839"
                        ],
                        "name": "R. Montague",
                        "slug": "R.-Montague",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Montague",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Montague"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 2477,
                                "start": 12
                            }
                        ],
                        "text": "Now Warren, Pereira and Pereira (1977) have described how Prolog can be compiled directly into efficient machine code. They put forward simple reasons why one might expect the speed of the code produced to be comparable with that for more conventional high-level languages, such as Lisp, and argue in particular that pattern matching encourages a better implementation of operations on structured data than the conventional use of selector and constructor functions (such as ear, cdr and cons). A practical implementation exists for the DECsystem-10 machine and actual timing data (Warren, 1977a) supports these conclusions. On the basis of this evidence, one can therefore say that a DCG is expressed directly in a general purpose programming language which has an efficiency comparable with Lisp. An ATN, on the other hand, needs a special interpreter or compiler. Since the ATN formalism relies so heavily on Lisp constructions for expressing tests etc., it is difficult to imagine an ATN compiler which did not generate Lisp code as an intermediary. Therefore it is probably fair to say that ATN efficiency is limited by, and necessarily somewhat inferior to, the efficiency of Lisp for writing grammars. A disadvantage of ATNs, or at least of the implementations described, is that the system does not have immediate access to the value of a registerQthe GETR function has to search down an association list of register-value pairs. In Prolog implementations, on the other hand, each variable's value is stored at a known location. This is achieved without any overheads of copying information into or out of variable value cells at procedure call and exit (as happens, for example, in \"shallow binding\" implementations of Lisp). The only significant overhead of this kind in Prolog is attributable to its nondeterminacy. In certain circumstances when instantiating a variable, the variable's address is remembered on a push-down list, so that the variable can be reset to \"uninstantiated\" on backtracking. In the DECsystem-10 implementation, these operations are implemented very efficiently at the machine-code level, and only account for a small proportion of the time spent in a typical Prolog computation. Note that the non-determinacy of ATNs has to be achieved using what facilities are provided by the higher level language Lisp, which, unlike Prolog, does not itself incorporate any machinery for non-determinate computation. A discussion in Warren et al. (1977) attributes much of Prolog's surprisingly competitive speed, compared with Lisp, to the use of \"structure sharing\" (Boyer and Moore, 1972; Warren, 1977a) to build new data structures."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 43,
                                "start": 25
                            }
                        ],
                        "text": "The reader familiar with Montague's (1973) work, will note the similarity of this analysis to Montague's treatment."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 39,
                                "start": 12
                            }
                        ],
                        "text": "Now Warren, Pereira and Pereira (1977) have described how Prolog can be compiled directly into efficient machine code."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 195895453,
            "fieldsOfStudy": [
                "Linguistics"
            ],
            "id": "a376f76c6029cd053db3a601f95b0f4e9b3d56fc",
            "isKey": true,
            "numCitedBy": 2117,
            "numCiting": 4,
            "paperAbstract": {
                "fragments": [],
                "text": "The aim of this paper is to present in a rigorous way the syntax and semantics of a certain fragment of a certain dialect of English. For expository purposes the fragment has been made as simple and restricted as it can be while accommodating all the more puzzling cases of quantification and reference with which I am acquainted.1"
            },
            "slug": "The-Proper-Treatment-of-Quantification-in-Ordinary-Montague",
            "title": {
                "fragments": [],
                "text": "The Proper Treatment of Quantification in Ordinary English"
            },
            "tldr": {
                "abstractSimilarityScore": 100,
                "text": "The aim of this paper is to present in a rigorous way the syntax and semantics of a certain fragment of acertain dialect of English."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1973
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1835171"
                        ],
                        "name": "F. Darvas",
                        "slug": "F.-Darvas",
                        "structuredName": {
                            "firstName": "Ferenc",
                            "lastName": "Darvas",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Darvas"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1719771"
                        ],
                        "name": "I. Fut\u00f3",
                        "slug": "I.-Fut\u00f3",
                        "structuredName": {
                            "firstName": "Ivan",
                            "lastName": "Fut\u00f3",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "I. Fut\u00f3"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1702653"
                        ],
                        "name": "P. Szeredi",
                        "slug": "P.-Szeredi",
                        "structuredName": {
                            "firstName": "P\u00e9ter",
                            "lastName": "Szeredi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Szeredi"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "useful applications, including algebraic \"symbol crunching\" (Bergman and Kanoui, 1975), architectural design (Markusz, 1977), drug design ( Darvas et al., 1977 ) and compiler implementation (Warren, 1977a, 1977b)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 7415555,
            "fieldsOfStudy": [
                "Medicine"
            ],
            "id": "fb001bf56969e3c66605d102b01ae921cc9d3964",
            "isKey": false,
            "numCitedBy": 13,
            "numCiting": 11,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "Logic-based-program-system-for-predicting-drug-Darvas-Fut\u00f3",
            "title": {
                "fragments": [],
                "text": "Logic-based program system for predicting drug interactions."
            },
            "venue": {
                "fragments": [],
                "text": "International journal of bio-medical computing"
            },
            "year": 1978
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709749"
                        ],
                        "name": "R. Kowalski",
                        "slug": "R.-Kowalski",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Kowalski",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Kowalski"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 285,
                                "start": 41
                            }
                        ],
                        "text": "An important idea, due to Colmerauer and Kowalski (cf. Kowalski, 1974b; Colmerauer, 1975), is to translate the special purpose formalism of CFGs into a general purpose one, namely first-order predicate logic. They devised a particular method (having its origins in Colmerauer's (1970) Q-systems) for expressing context-free rules as logic statements of a restricted kind, known as definite clauses or \"Horn clauses\"."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 894,
                                "start": 41
                            }
                        ],
                        "text": "An important idea, due to Colmerauer and Kowalski (cf. Kowalski, 1974b; Colmerauer, 1975), is to translate the special purpose formalism of CFGs into a general purpose one, namely first-order predicate logic. They devised a particular method (having its origins in Colmerauer's (1970) Q-systems) for expressing context-free rules as logic statements of a restricted kind, known as definite clauses or \"Horn clauses\". The problem of recognising, or parsing, a string of a language is then transformed into the problem of proving that a certain theorem follows from the definite clause axioms which describe the language. These ideas might only have been of theoretical interest. However, at the same time, Colmerauer and Kowalski originated a more far-reaching idea. This was that a collection of definite clauses can be considered to be a program (see Kowalski (1974a, 1974b); van Emden (1975).) It turns out that automatic deduction can exhibit all the characteristics we associate with effective computation, provided the deduction is pursued in a suitably goal-directed way."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 1553,
                                "start": 41
                            }
                        ],
                        "text": "An important idea, due to Colmerauer and Kowalski (cf. Kowalski, 1974b; Colmerauer, 1975), is to translate the special purpose formalism of CFGs into a general purpose one, namely first-order predicate logic. They devised a particular method (having its origins in Colmerauer's (1970) Q-systems) for expressing context-free rules as logic statements of a restricted kind, known as definite clauses or \"Horn clauses\". The problem of recognising, or parsing, a string of a language is then transformed into the problem of proving that a certain theorem follows from the definite clause axioms which describe the language. These ideas might only have been of theoretical interest. However, at the same time, Colmerauer and Kowalski originated a more far-reaching idea. This was that a collection of definite clauses can be considered to be a program (see Kowalski (1974a, 1974b); van Emden (1975).) It turns out that automatic deduction can exhibit all the characteristics we associate with effective computation, provided the deduction is pursued in a suitably goal-directed way. A practical realisation of this concept of \"programming in logic\" was developed by Colmerauer and his colleagues in the form of the programming language Prolog. (See Roussel (1975), Pereira et al. (1978).) Prolog is based on a very simple but efficient proof procedure. Several implementations of the language have been completed, and these implementations have shown that Prolog can be as efficient as conventional high-level programming languages, cf. Warren et al. (1977). Prolog has been successfully used to write large-scale programs for a number of"
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 1259,
                                "start": 41
                            }
                        ],
                        "text": "An important idea, due to Colmerauer and Kowalski (cf. Kowalski, 1974b; Colmerauer, 1975), is to translate the special purpose formalism of CFGs into a general purpose one, namely first-order predicate logic. They devised a particular method (having its origins in Colmerauer's (1970) Q-systems) for expressing context-free rules as logic statements of a restricted kind, known as definite clauses or \"Horn clauses\". The problem of recognising, or parsing, a string of a language is then transformed into the problem of proving that a certain theorem follows from the definite clause axioms which describe the language. These ideas might only have been of theoretical interest. However, at the same time, Colmerauer and Kowalski originated a more far-reaching idea. This was that a collection of definite clauses can be considered to be a program (see Kowalski (1974a, 1974b); van Emden (1975).) It turns out that automatic deduction can exhibit all the characteristics we associate with effective computation, provided the deduction is pursued in a suitably goal-directed way. A practical realisation of this concept of \"programming in logic\" was developed by Colmerauer and his colleagues in the form of the programming language Prolog. (See Roussel (1975), Pereira et al."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 53,
                                "start": 37
                            }
                        ],
                        "text": "The basic idea has been discussed by Kowalski (1974b) and Colmerauer (1975) has given a fully formal treatment."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 17,
                                "start": 0
                            }
                        ],
                        "text": "Kowalski (1974b). This will be discussed further in Section 3."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 25,
                                "start": 9
                            }
                        ],
                        "text": ":gy, cf. Kowalski (1974b)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 1282,
                                "start": 41
                            }
                        ],
                        "text": "An important idea, due to Colmerauer and Kowalski (cf. Kowalski, 1974b; Colmerauer, 1975), is to translate the special purpose formalism of CFGs into a general purpose one, namely first-order predicate logic. They devised a particular method (having its origins in Colmerauer's (1970) Q-systems) for expressing context-free rules as logic statements of a restricted kind, known as definite clauses or \"Horn clauses\". The problem of recognising, or parsing, a string of a language is then transformed into the problem of proving that a certain theorem follows from the definite clause axioms which describe the language. These ideas might only have been of theoretical interest. However, at the same time, Colmerauer and Kowalski originated a more far-reaching idea. This was that a collection of definite clauses can be considered to be a program (see Kowalski (1974a, 1974b); van Emden (1975).) It turns out that automatic deduction can exhibit all the characteristics we associate with effective computation, provided the deduction is pursued in a suitably goal-directed way. A practical realisation of this concept of \"programming in logic\" was developed by Colmerauer and his colleagues in the form of the programming language Prolog. (See Roussel (1975), Pereira et al. (1978).) Prolog is based on a very simple but efficient proof procedure."
                    },
                    "intents": []
                }
            ],
            "corpusId": 10850205,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c5340982746f1aac55c1cc7d2c06b670f522f253",
            "isKey": true,
            "numCitedBy": 853,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "Predicate-Logic-as-Programming-Language-Kowalski",
            "title": {
                "fragments": [],
                "text": "Predicate Logic as Programming Language"
            },
            "venue": {
                "fragments": [],
                "text": "IFIP Congress"
            },
            "year": 1974
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145505730"
                        ],
                        "name": "M. Bates",
                        "slug": "M.-Bates",
                        "structuredName": {
                            "firstName": "Madeleine",
                            "lastName": "Bates",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Bates"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 605,
                                "start": 99
                            }
                        ],
                        "text": "Certainly this is the way ~TNs are always explained informally in the literature--see for instance Bates (1978), Section 2, and contrast this with the way we introduce DCGs. Conceptually at least, an ATN is no more than a particular mechanism for parsing a language top-down, left-to-right, and the sequencing imposed by this parsing strategy is implicit in the way registers are operated on. Although it is possible (with ingenuity) to produce other kinds of parsers for ATNs, this requires a re-interpretation of the meaning of arc actions, and necessitates restrictions on register usage. Bates (1978), in her introduction, claims that \"one does not need to know how to program a computer in order to write or use an ATN\"."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 229,
                                "start": 14
                            }
                        ],
                        "text": ", 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977). For the reader not familiar with ATNs, we recommend Bates (1978) as a clear and thorough introduction."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 116,
                                "start": 105
                            }
                        ],
                        "text": "They have been used to implement a number of working natural language systems (Woods et al., 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 112,
                                "start": 99
                            }
                        ],
                        "text": "Certainly this is the way ~TNs are always explained informally in the literature--see for instance Bates (1978), Section 2, and contrast this with the way we introduce DCGs."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 60843648,
            "fieldsOfStudy": [
                "Linguistics"
            ],
            "id": "0a98216d635c317900a254495f88e1c802b4598f",
            "isKey": true,
            "numCitedBy": 7,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": "Abstract : This report presents a system for syntactic analysis in the context of a computer system for the understanding of spontaneously spoken English."
            },
            "slug": "Syntactic-Analysis-in-a-Speech-Understanding-System-Bates",
            "title": {
                "fragments": [],
                "text": "Syntactic Analysis in a Speech Understanding System"
            },
            "tldr": {
                "abstractSimilarityScore": 77,
                "text": "A system for syntactic analysis in the context of a computer system for the understanding of spontaneously spoken English is presented."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1975
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 373,
                                "start": 33
                            }
                        ],
                        "text": "We list five examples taken from Burton (1976) of sentences with their CPU times for parsing by the compiled LUNAR system running on a DEC KA-10 processor. Each of these examples is followed, for comparison, by a superficially similar sentence accepted by a DCG based on the parsing component of a natural language question-answering system written by Veronica Dahl (1977). This system treats a sizable subset of natural language, approaching in scale that of LUNAR."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 65,
                                "start": 41
                            }
                        ],
                        "text": "The ATN from Woods (1970), as amended in Burton and Woods (1976), is listed here, together with a DCG translation of a slightly modified network."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 130,
                                "start": 118
                            }
                        ],
                        "text": "They have been used to implement a number of working natural language systems (Woods et al., 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 47,
                                "start": 33
                            }
                        ],
                        "text": "We list five examples taken from Burton (1976) of sentences with their CPU times for parsing by the compiled LUNAR system running on a DEC KA-10 processor."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "0976), Semantic grammar: an engineering technique for construction of natural language understanding systems, BBN Report"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1976
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 103,
                                "start": 89
                            }
                        ],
                        "text": "ing algorithm can be generalised to give a complete proof procedure for definite clauses (Warren, 1975)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 44,
                                "start": 23
                            }
                        ],
                        "text": "These are discussed in Warren et al. (1977). Here we list briefly those features which are especially relevant to grammar writing."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 345,
                                "start": 48
                            }
                        ],
                        "text": "differences; it seems fair to say that both van Wijngaarden grammars and affix grammars can be viewed as special cases of DCGs. In this paper we shah be specifically concerned with comparing DCGs with a formalism which at first sight is less obviously similar, namely \"augmented transition networks\" (ATNs). ATNs were introduced by Woods (1970) as a powerful and practical formalism for natural language analysis."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Implementation of an eff~cientipredicate logic interpreter based on"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1975
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9079926"
                        ],
                        "name": "W. Woods",
                        "slug": "W.-Woods",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Woods",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "W. Woods"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 232861384,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b841aec054c5addb309fd0626c61394e99ac02e6",
            "isKey": false,
            "numCitedBy": 200,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "An-Experimental-Parsing-System-for-Transition-Woods",
            "title": {
                "fragments": [],
                "text": "An Experimental Parsing System for Transition Network Grammars"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1973
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2431310"
                        ],
                        "name": "A. Colmerauer",
                        "slug": "A.-Colmerauer",
                        "structuredName": {
                            "firstName": "Alain",
                            "lastName": "Colmerauer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Colmerauer"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 39529431,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ee31a91ad7ba73f5aca77e0146d659d60741e432",
            "isKey": false,
            "numCitedBy": 214,
            "numCiting": 3,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "Metamorphosis-Grammars-Colmerauer",
            "title": {
                "fragments": [],
                "text": "Metamorphosis Grammars"
            },
            "venue": {
                "fragments": [],
                "text": "Natural Language Communication with Computers"
            },
            "year": 1978
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "A general syntactic processor"
            },
            "venue": {
                "fragments": [],
                "text": "NaturaILanguage Processing"
            },
            "year": 1973
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "An interesting natural language subset, Groupe d'Intelligence ArtificieUe"
            },
            "venue": {
                "fragments": [],
                "text": "An interesting natural language subset, Groupe d'Intelligence ArtificieUe"
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 20,
                                "start": 9
                            }
                        ],
                        "text": "We take (Bates, 1978) as the definitive reference on ATNs."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 64,
                                "start": 52
                            }
                        ],
                        "text": "For the reader not familiar with ATNs, we recommend Bates (1978) as a clear and thorough introduction."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "The theory and practice of augmented transition networks, in: L. Bole (Ed.), Natural Language Communication with Computers"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1978
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Implementation of an eff~cientipredicate logic interpreter based on Farley deduction, Research proposal to the Science Research Council"
            },
            "venue": {
                "fragments": [],
                "text": "Implementation of an eff~cientipredicate logic interpreter based on Farley deduction, Research proposal to the Science Research Council"
            },
            "year": 1975
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "User's guide to DECsystem-10 Prolog, Div"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1978
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 140,
                                "start": 114
                            }
                        ],
                        "text": "(The adequacy of definite clauses for programming any computable task, without \"coding\" of the data, is proved by Andreka and Nemeti (1976).) Of more interest is the question of what tasks can usefully be programmed in the two systems."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "The generalised completeness of Horn predicate-logic as a programming language"
            },
            "venue": {
                "fragments": [],
                "text": "Dept. of AI Research Report"
            },
            "year": 1976
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Which people are owners of small files that date from Monday"
            },
            "venue": {
                "fragments": [],
                "text": "Which people are owners of small files that date from Monday"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Un systeme d~ductif d'interrogation de banques de donn~es en Espagnol, Groupe d'Intelligence Artificielle"
            },
            "venue": {
                "fragments": [],
                "text": "Un systeme d~ductif d'interrogation de banques de donn~es en Espagnol, Groupe d'Intelligence Artificielle"
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 228,
                                "start": 217
                            }
                        ],
                        "text": "They have been used to implement a number of working natural language systems (Woods et al., 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Speech understanding systems: final report"
            },
            "venue": {
                "fragments": [],
                "text": "BBN RePOrt"
            },
            "year": 1976
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "User's guide to DECsystem-10 Prolog"
            },
            "venue": {
                "fragments": [],
                "text": "User's guide to DECsystem-10 Prolog"
            },
            "year": 1978
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "past _participle(been,be)"
            },
            "venue": {
                "fragments": [],
                "text": "past _participle(been,be)"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Implementing Prolog---compiling predicate logic prosrams, Dept. of AI Research Reports 39 and 40"
            },
            "venue": {
                "fragments": [],
                "text": "Implementing Prolog---compiling predicate logic prosrams, Dept. of AI Research Reports 39 and 40"
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 13
                            }
                        ],
                        "text": "Note that in Colmerauer (1975), grammar rules are directly identified with definite clauses of this preprocessed form, and there is therefore no mention ofthe'connects' predicate."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 75,
                                "start": 58
                            }
                        ],
                        "text": "The basic idea has been discussed by Kowalski (1974b) and Colmerauer (1975) has given a fully formal treatment."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Les grammaires de metamorphose, Groupe d'Intelligence Artificielle Appears as \"Metamorphosis Grammars"
            },
            "venue": {
                "fragments": [],
                "text": "Natural Language Communication with Computers"
            },
            "year": 1975
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 124,
                                "start": 109
                            }
                        ],
                        "text": "useful applications, including algebraic \"symbol crunching\" (Bergman and Kanoui, 1975), architectural design (Markusz, 1977), drug design (Darvas et al."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Designing variants of fiats"
            },
            "venue": {
                "fragments": [],
                "text": "Proc. IFIP Conf"
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "verbtype(V,intransitive) :-intransitive(V). transitive(shoot)"
            },
            "venue": {
                "fragments": [],
                "text": "verbtype(V,intransitive) :-intransitive(V). transitive(shoot)"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 86,
                                "start": 60
                            }
                        ],
                        "text": "useful applications, including algebraic \"symbol crunching\" (Bergman and Kanoui, 1975), architectural design (Markusz, 1977), drug design (Darvas et al."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 830,
                                "start": 61
                            }
                        ],
                        "text": "useful applications, including algebraic \"symbol crunching\" (Bergman and Kanoui, 1975), architectural design (Markusz, 1977), drug design (Darvas et al., 1977) and compiler implementation (Warren, 1977a, 1977b). Now if a CFG is expressed in definite clauses according to the ColmerauerKowalski method, and executed as a Prolog program, the program behaves as an efficient top-down parser for the language the CFG describes. 1 This fact becomes particularly significant when coupled with another discovery--that the technique for translating CFGs into definite clauses has a simple generalisation, resulting in a formalism far more powerful than CFGs, but equally amenable to execution by Prolog. This formalism--the main subject of our papermwe call definite clause grammars (DCGs). DCGs are a special case of Colmerauer's (1975) \"metamorphosis grammars\", which are for Chomsky type-0 grammars what DCGs are for CFGs."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 2726,
                                "start": 61
                            }
                        ],
                        "text": "useful applications, including algebraic \"symbol crunching\" (Bergman and Kanoui, 1975), architectural design (Markusz, 1977), drug design (Darvas et al., 1977) and compiler implementation (Warren, 1977a, 1977b). Now if a CFG is expressed in definite clauses according to the ColmerauerKowalski method, and executed as a Prolog program, the program behaves as an efficient top-down parser for the language the CFG describes. 1 This fact becomes particularly significant when coupled with another discovery--that the technique for translating CFGs into definite clauses has a simple generalisation, resulting in a formalism far more powerful than CFGs, but equally amenable to execution by Prolog. This formalism--the main subject of our papermwe call definite clause grammars (DCGs). DCGs are a special case of Colmerauer's (1975) \"metamorphosis grammars\", which are for Chomsky type-0 grammars what DCGs are for CFGs. Although metamorphosis grammars can be translated into definite clauses, the correspondence is not nearly so direct as that for DCGs. DCGs are a natural extension of CFGs. As such, DCGs inherit the properties which make CFGs so important for language theory: the possible forms for the sentences of a language are described in a clear and modular way; it is possible to represent the recursive embedding of phrases which is characteristic of almost all interesting languages; there is an established body of results on CFGs which is very useful in designing parsing algorithms. Now it is well known that CFGs are not fully adequate for describing natural language, nor even many programming languages. DCGs overcome this inadequacy by extending CFGs in three important ways. Firstly, DCGs provide for context-dependency in a grammar, so that the permissible forms for a phrase may depend on the context in which that phrase occurs in the string. Secondly, DCGs allow arbitrary tree structures to be built in the course of the parsing, in a way that is not constrained by the recursive structure of the grammar; such tree structures can provide a representation of the \"meaning\" of the string. Thirdly, DCGs allow extra conditions to be included in the grammar rules; these conditions make the course of the parsing depend on auxiliary computations, up to an unlimited extent. DCGs, as implemented via Prolog, have been used to write a number of practical systems for language analysis, e.g. for natural language question answering (Dahl, 1977), and in compiler implementation (Warren, 1977b). DCGs bear some similarities to other formalisms known to computer scientists, notably the \"van Wijngaarden grammars\" used in the Algol-68 Report (van Wijngaarden, 1974), and the \"affix grammars\" which Koster (1971) took as the basis for the compiler definition language CDL."
                    },
                    "intents": []
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Sycophante: syst~me de calcul formel et d'int6gration symbolique sur l'ordinateur, Groupe d'Intelligence Artificielle, Universit6 de Marseille-Luminy"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1975
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "How many files date from Monday? 39 msec. how_many(X:[] & file, and(and(pr(file(X)),and(true,true)), pr(dateof(X, [monday ])))) List modal plag analysis for lunar samples that contain olivine"
            },
            "venue": {
                "fragments": [],
                "text": "How many files date from Monday? 39 msec. how_many(X:[] & file, and(and(pr(file(X)),and(true,true)), pr(dateof(X, [monday ])))) List modal plag analysis for lunar samples that contain olivine"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "How many breccias contain olivine ? 175 msec"
            },
            "venue": {
                "fragments": [],
                "text": "How many breccias contain olivine ? 175 msec"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Ed.)(1974), Revised Report on the Algorithmic Lang~"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1976
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Prolog: manuel de rff~rence et d'utilisation, Groupe d'Intelligence Artificielle"
            },
            "venue": {
                "fragments": [],
                "text": "Prolog: manuel de rff~rence et d'utilisation, Groupe d'Intelligence Artificielle"
            },
            "year": 1975
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "intransitive(sleep)"
            },
            "venue": {
                "fragments": [],
                "text": "intransitive(sleep)"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Prolog: manuel de rff~rence et d'utilisation, Groupe d'Intelligence Artificielle, Universit6 de Marseille-Luminy"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1975
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Sycophante: syst~me de calcul formel et d'int6gration symbolique sur l'ordinateur, Groupe d'Intelligence Artificielle"
            },
            "venue": {
                "fragments": [],
                "text": "Sycophante: syst~me de calcul formel et d'int6gration symbolique sur l'ordinateur, Groupe d'Intelligence Artificielle"
            },
            "year": 1975
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 103,
                                "start": 79
                            }
                        ],
                        "text": "They have been used to implement a number of working natural language systems (Woods et al., 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "The lunar sciences natural language information system: ~aal report"
            },
            "venue": {
                "fragments": [],
                "text": "BBN Report"
            },
            "year": 1972
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 26,
                                "start": 13
                            }
                        ],
                        "text": "The ATN from Woods (1970), as amended in Burton and Woods (1976), is listed here, together with a DCG translation of a slightly modified network."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 43,
                                "start": 23
                            }
                        ],
                        "text": "These are discussed in Warren et al. (1977) ."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 239,
                                "start": 203
                            }
                        ],
                        "text": "A feature of the DECsystem-10 Prolog implementation which can make a very significant contribution to the speed of operation of a DCG is the automatic indexing provided for the clauses of each predicate (Warren et al., 1977; Warren, 1977a)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Prolog--the language and its"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Les syst~:mes-Q ou un formalisme pour analyser et synth6tiser des phrases sur ordinateur, Internal publication no"
            },
            "venue": {
                "fragments": [],
                "text": "Les syst~:mes-Q ou un formalisme pour analyser et synth6tiser des phrases sur ordinateur, Internal publication no"
            },
            "year": 1970
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "What are the files of David ? 78 msec"
            },
            "venue": {
                "fragments": [],
                "text": "What are the files of David ? 78 msec"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Speech understanding systems: final report, BBN RePOrt 3438 ~ m b e r 1976)"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1976
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "s_transitive(believe). infinitive(be"
            },
            "venue": {
                "fragments": [],
                "text": "s_transitive(believe). infinitive(be"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 228,
                                "start": 206
                            }
                        ],
                        "text": "They have been used to implement a number of working natural language systems (Woods et al., 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 162,
                                "start": 114
                            }
                        ],
                        "text": ", 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 126,
                                "start": 78
                            }
                        ],
                        "text": "Moreover, it is the required mode of operation for recent ATN implementations (Burton and Woods, 1976; Finin and Hadden, 1977) which compile the ATN into low-level code (using Lisp as an intermediary)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "A compiling system for augmented transition networks, Preprints of COLING-76"
            },
            "venue": {
                "fragments": [],
                "text": "A compiling system for augmented transition networks, Preprints of COLING-76"
            },
            "year": 1976
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 152,
                                "start": 137
                            }
                        ],
                        "text": "A general and powerful means for treating constituent extraposition is provided by an extension of DCGs, called \"extraposition grammars\" (Pereira, 1979)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 366,
                                "start": 138
                            }
                        ],
                        "text": "A general and powerful means for treating constituent extraposition is provided by an extension of DCGs, called \"extraposition grammars\" (Pereira, 1979). However, an alternative solution is available in DCGs, through the use of extra arguments to carry the extraposed constituents. A technique directly analogous to this second approach is discussed by Woods (1973) to avoid VIR/HOLD in ATNs, and has been used in situations where parsing cafinot proceed from ~lt'-~\" to rigk: t-n-~\u00b0s---L07~'~."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Extraposition grannnars, Working Paper No"
            },
            "venue": {
                "fragments": [],
                "text": "Extraposition grannnars, Working Paper No"
            },
            "year": 1979
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "verbtype(V,transitive) :-transitive(V)"
            },
            "venue": {
                "fragments": [],
                "text": "verbtype(V,transitive) :-transitive(V)"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Logic for problem solving Amsterdam as part of a book of the same title Designing variants of fiats"
            },
            "venue": {
                "fragments": [],
                "text": "DCL Memo 75, Dept. of AI Proc. IFIP Conf"
            },
            "year": 1974
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 130,
                                "start": 118
                            }
                        ],
                        "text": "They have been used to implement a number of working natural language systems (Woods et al., 1972, 1976; Bates, 1975; Burton, 1976), and some efficient implementations of the formalism have been developed (Burton and Woods, 1976; Finin and Hadden, 1977)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "0976), Semantic grammar: an engineering technique for construction of natural language understanding systems"
            },
            "venue": {
                "fragments": [],
                "text": "BBN Report"
            },
            "year": 1976
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Implementing Prolog---compiling predicate logic prosrams, Dept"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Aff~ grammars"
            },
            "venue": {
                "fragments": [],
                "text": "Algol-68 Implementation"
            },
            "year": 1971
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "1977b), Logic programming and compiler writing"
            },
            "venue": {
                "fragments": [],
                "text": "Dept. of AI Research"
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 20,
                                "start": 9
                            }
                        ],
                        "text": "We take (Bates, 1978) as the definitive reference on ATNs."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 64,
                                "start": 52
                            }
                        ],
                        "text": "For the reader not familiar with ATNs, we recommend Bates (1978) as a clear and thorough introduction."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "The theory and practice of augmented transition networks"
            },
            "venue": {
                "fragments": [],
                "text": "Natural Language Communication with Computers"
            },
            "year": 1978
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "verbtype(be,copula)"
            },
            "venue": {
                "fragments": [],
                "text": "verbtype(be,copula)"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 25,
                                "start": 9
                            }
                        ],
                        "text": ":gy, cf. Kowalski (1974b)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 53,
                                "start": 37
                            }
                        ],
                        "text": "The basic idea has been discussed by Kowalski (1974b) and Colmerauer (1975) has given a fully formal treatment."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "1974b), Logic for problem solving"
            },
            "venue": {
                "fragments": [],
                "text": "DCL Memo 75, Dept. of AI,"
            },
            "year": 1974
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 184,
                                "start": 170
                            }
                        ],
                        "text": "The symbols can be generalised to arbitrary tree structures (possibly with variables) and, more interestingly, instead of a simple list of symbols one can have a \"chart\" (Kaplan, 1973) catering for alternatives in the input."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "A general syntactic processor, in: Randall Rustin (Ed.), NaturaILanguage"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1973
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 159,
                                "start": 138
                            }
                        ],
                        "text": "useful applications, including algebraic \"symbol crunching\" (Bergman and Kanoui, 1975), architectural design (Markusz, 1977), drug design (Darvas et al., 1977) and compiler implementation (Warren, 1977a, 1977b)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Un systeme d~ductif d'interrogation de banques de donn~es en Espagnol, Groupe d'Intelligence Artificielle, Universit6 de Marseille-Luminy"
            },
            "venue": {
                "fragments": [],
                "text": "Universit6 de Marseille-Luminy (October"
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 125,
                                "start": 109
                            }
                        ],
                        "text": "Definite clauses have also been called \"Horn clauses\" or \"regular clauses\", but we prefer the name coined by van Emden (1975), since it gives at least some indication of their nature."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Programming with resolution logic"
            },
            "venue": {
                "fragments": [],
                "text": "Canada"
            },
            "year": 1975
        }
    ],
    "meta_info": {
        "citationIntent": "all",
        "citationIntentCount": {
            "background": 19,
            "methodology": 19
        },
        "citationType": "citedPapers",
        "pageNumber": 1,
        "requestedPageSize": 10,
        "sort": "relevance",
        "totalCitations": 60,
        "totalPages": 6
    },
    "page_url": "https://www.semanticscholar.org/paper/Definite-Clause-Grammars-for-Language-Analysis-A-of-Pereira-Warren/fbc04a1951003ba164303b2898fb7f3c6b4e9083?sort=total-citations"
}